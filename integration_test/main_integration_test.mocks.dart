// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_starter_kit/integration_test/main_integration_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i9;

import 'package:bloc/bloc.dart' as _i4;
import 'package:flutter/material.dart' as _i8;
import 'package:flutter_modular/src/presenter/models/modular_navigator.dart'
    as _i6;
import 'package:flutter_modular/src/presenter/models/route.dart' as _i7;
import 'package:flutter_starter_kit/src/modules/todo_module/applications/bloc/task_bloc/task_bloc.dart'
    as _i2;
import 'package:flutter_starter_kit/src/utils/image_picker/image_picker_util.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTaskState_0 extends _i1.Fake implements _i2.TaskState {}

/// A class which mocks [TaskBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBloc extends _i1.Mock implements _i2.TaskBloc {
  MockTaskBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTaskState_0()) as _i2.TaskState);
  @override
  _i3.Stream<_i2.TaskState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i2.TaskState>.empty()) as _i3.Stream<_i2.TaskState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i2.TaskEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.TaskEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.TaskState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.TaskEvent>(_i4.EventHandler<E, _i2.TaskState>? handler,
          {_i4.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(_i4.Transition<_i2.TaskEvent, _i2.TaskState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void onChange(_i4.Change<_i2.TaskState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ImagePickerUtil].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePickerUtil extends _i1.Mock implements _i5.ImagePickerUtil {
  MockImagePickerUtil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String?> getBase64Image() =>
      (super.noSuchMethod(Invocation.method(#getBase64Image, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
}

/// A class which mocks [IModularNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockIModularNavigator extends _i1.Mock implements _i6.IModularNavigator {
  MockIModularNavigator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  List<_i7.ParallelRoute<dynamic>> get navigateHistory =>
      (super.noSuchMethod(Invocation.getter(#navigateHistory),
              returnValue: <_i7.ParallelRoute<dynamic>>[])
          as List<_i7.ParallelRoute<dynamic>>);
  @override
  _i3.Future<T?> push<T extends Object?>(_i8.Route<T>? route) =>
      (super.noSuchMethod(Invocation.method(#push, [route]),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments,
          bool? forRoot = false}) =>
      (super.noSuchMethod(
          Invocation.method(#popAndPushNamed, [routeName],
              {#result: result, #arguments: arguments, #forRoot: forRoot}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushNamed<T extends Object?>(String? routeName,
          {Object? arguments, bool? forRoot = false}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamed, [routeName],
              {#arguments: arguments, #forRoot: forRoot}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
          String? newRouteName, bool Function(_i8.Route<dynamic>)? predicate,
          {Object? arguments, bool? forRoot = false}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamedAndRemoveUntil, [newRouteName, predicate],
              {#arguments: arguments, #forRoot: forRoot}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments,
          bool? forRoot = false}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacementNamed, [routeName],
              {#result: result, #arguments: arguments, #forRoot: forRoot}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  void pop<T extends Object?>([T? result]) =>
      super.noSuchMethod(Invocation.method(#pop, [result]),
          returnValueForMissingStub: null);
  @override
  bool canPop() =>
      (super.noSuchMethod(Invocation.method(#canPop, []), returnValue: false)
          as bool);
  @override
  _i3.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#maybePop, [result]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  void popUntil(bool Function(_i8.Route<dynamic>)? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void navigate(String? path, {dynamic arguments}) => super.noSuchMethod(
      Invocation.method(#navigate, [path], {#arguments: arguments}),
      returnValueForMissingStub: null);
  @override
  void setObservers(List<_i8.NavigatorObserver>? navigatorObservers) =>
      super.noSuchMethod(Invocation.method(#setObservers, [navigatorObservers]),
          returnValueForMissingStub: null);
  @override
  void setNavigatorKey(_i8.GlobalKey<_i8.NavigatorState>? navigatorkey) =>
      super.noSuchMethod(Invocation.method(#setNavigatorKey, [navigatorkey]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}
