// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_starter_kit/test/src/modules/todo_module/services/datasources/api_datasource_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;

import 'package:dio/dio.dart' as _i7;
import 'package:dio/src/adapter.dart' as _i3;
import 'package:dio/src/cancel_token.dart' as _i11;
import 'package:dio/src/dio_mixin.dart' as _i5;
import 'package:dio/src/options.dart' as _i2;
import 'package:dio/src/response.dart' as _i6;
import 'package:dio/src/transformer.dart' as _i4;
import 'package:flutter_starter_kit/src/modules/todo_module/services/datasources/api_datasource.dart'
    as _i12;
import 'package:flutter_starter_kit/src/modules/todo_module/services/models/task_create_datasource_model.dart'
    as _i8;
import 'package:flutter_starter_kit/src/modules/todo_module/services/models/task_delete_datasource_model.dart'
    as _i14;
import 'package:flutter_starter_kit/src/modules/todo_module/services/models/task_get_datasource_model.dart'
    as _i13;
import 'package:flutter_starter_kit/src/modules/todo_module/services/models/task_update_datasource_model.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBaseOptions_0 extends _i1.Fake implements _i2.BaseOptions {}

class _FakeHttpClientAdapter_1 extends _i1.Fake
    implements _i3.HttpClientAdapter {}

class _FakeTransformer_2 extends _i1.Fake implements _i4.Transformer {}

class _FakeInterceptors_3 extends _i1.Fake implements _i5.Interceptors {}

class _FakeResponse_4<T> extends _i1.Fake implements _i6.Response<T> {}

class _FakeDio_5 extends _i1.Fake implements _i7.Dio {}

class _FakeTaskCreateResponseDataSourceModel_6 extends _i1.Fake
    implements _i8.TaskCreateResponseDataSourceModel {}

class _FakeTaskUpdateResponseDataSourceModel_7 extends _i1.Fake
    implements _i9.TaskUpdateResponseDataSourceModel {}

class _FakeStreamSubscription_8<T> extends _i1.Fake
    implements _i10.StreamSubscription<T> {}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i7.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseOptions get options =>
      (super.noSuchMethod(Invocation.getter(#options),
          returnValue: _FakeBaseOptions_0()) as _i2.BaseOptions);
  @override
  set options(_i2.BaseOptions? _options) =>
      super.noSuchMethod(Invocation.setter(#options, _options),
          returnValueForMissingStub: null);
  @override
  _i3.HttpClientAdapter get httpClientAdapter =>
      (super.noSuchMethod(Invocation.getter(#httpClientAdapter),
          returnValue: _FakeHttpClientAdapter_1()) as _i3.HttpClientAdapter);
  @override
  set httpClientAdapter(_i3.HttpClientAdapter? _httpClientAdapter) => super
      .noSuchMethod(Invocation.setter(#httpClientAdapter, _httpClientAdapter),
          returnValueForMissingStub: null);
  @override
  _i4.Transformer get transformer =>
      (super.noSuchMethod(Invocation.getter(#transformer),
          returnValue: _FakeTransformer_2()) as _i4.Transformer);
  @override
  set transformer(_i4.Transformer? _transformer) =>
      super.noSuchMethod(Invocation.setter(#transformer, _transformer),
          returnValueForMissingStub: null);
  @override
  _i5.Interceptors get interceptors =>
      (super.noSuchMethod(Invocation.getter(#interceptors),
          returnValue: _FakeInterceptors_3()) as _i5.Interceptors);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i6.Response<T>> get<T>(String? path,
          {Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [
                path
              ], {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> getUri<T>(Uri? uri,
          {_i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#getUri, [
                uri
              ], {
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> post<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> postUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#postUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> put<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> putUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#putUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> head<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#head, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> headUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#headUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> delete<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> deleteUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> patch<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> patchUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patchUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  void lock() => super.noSuchMethod(Invocation.method(#lock, []),
      returnValueForMissingStub: null);
  @override
  void unlock() => super.noSuchMethod(Invocation.method(#unlock, []),
      returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  _i10.Future<_i6.Response<dynamic>> download(String? urlPath, dynamic savePath,
          {_i2.ProgressCallback? onReceiveProgress,
          Map<String, dynamic>? queryParameters,
          _i11.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i2.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#download, [
                urlPath,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future<_i6.Response<dynamic>>.value(
                  _FakeResponse_4<dynamic>()))
          as _i10.Future<_i6.Response<dynamic>>);
  @override
  _i10.Future<_i6.Response<dynamic>> downloadUri(Uri? uri, dynamic savePath,
          {_i2.ProgressCallback? onReceiveProgress,
          _i11.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i2.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadUri, [
                uri,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future<_i6.Response<dynamic>>.value(
                  _FakeResponse_4<dynamic>()))
          as _i10.Future<_i6.Response<dynamic>>);
  @override
  _i10.Future<_i6.Response<T>> request<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i11.CancelToken? cancelToken,
          _i2.Options? options,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#request, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> requestUri<T>(Uri? uri,
          {dynamic data,
          _i11.CancelToken? cancelToken,
          _i2.Options? options,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#requestUri, [
                uri
              ], {
                #data: data,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(Invocation.method(#fetch, [requestOptions]),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse_4<T>()))
          as _i10.Future<_i6.Response<T>>);
}

/// A class which mocks [ApiDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiDataSource extends _i1.Mock implements _i12.ApiDataSource {
  MockApiDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Dio get http =>
      (super.noSuchMethod(Invocation.getter(#http), returnValue: _FakeDio_5())
          as _i7.Dio);
  @override
  _i10.Future<_i8.TaskCreateResponseDataSourceModel> create(
          {_i8.TaskCreateRequestDataSourceModel? task}) =>
      (super.noSuchMethod(Invocation.method(#create, [], {#task: task}),
              returnValue: Future<_i8.TaskCreateResponseDataSourceModel>.value(
                  _FakeTaskCreateResponseDataSourceModel_6()))
          as _i10.Future<_i8.TaskCreateResponseDataSourceModel>);
  @override
  _i10.Future<List<_i13.TaskGetResponseDataSourceModel>?> get(
          {_i13.TaskGetRequestDataSourceModel? query}) =>
      (super.noSuchMethod(Invocation.method(#get, [], {#query: query}),
              returnValue:
                  Future<List<_i13.TaskGetResponseDataSourceModel>?>.value())
          as _i10.Future<List<_i13.TaskGetResponseDataSourceModel>?>);
  @override
  _i10.Future<_i9.TaskUpdateResponseDataSourceModel> update(
          {_i9.TaskUpdateQueryParamsRequestDataSourceModel? queryParams,
          _i9.TaskUpdateRequestDataSourceModel? task}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #update, [], {#queryParams: queryParams, #task: task}),
              returnValue: Future<_i9.TaskUpdateResponseDataSourceModel>.value(
                  _FakeTaskUpdateResponseDataSourceModel_7()))
          as _i10.Future<_i9.TaskUpdateResponseDataSourceModel>);
  @override
  _i10.Future<void> delete(
          {_i14.TaskDeleteQueryParamsRequestDataSourceModel? queryParams}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [], {#queryParams: queryParams}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
}

/// A class which mocks [StreamView].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamView<T> extends _i1.Mock implements _i10.StreamView<T> {
  MockStreamView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);
  @override
  _i10.Future<int> get length => (super.noSuchMethod(Invocation.getter(#length),
      returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<bool> get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<T> get first => (super.noSuchMethod(Invocation.getter(#first),
      returnValue: Future<T>.value(null)) as _i10.Future<T>);
  @override
  _i10.Future<T> get last => (super.noSuchMethod(Invocation.getter(#last),
      returnValue: Future<T>.value(null)) as _i10.Future<T>);
  @override
  _i10.Future<T> get single => (super.noSuchMethod(Invocation.getter(#single),
      returnValue: Future<T>.value(null)) as _i10.Future<T>);
  @override
  _i10.Stream<T> asBroadcastStream(
          {void Function(_i10.StreamSubscription<T>)? onListen,
          void Function(_i10.StreamSubscription<T>)? onCancel}) =>
      (super.noSuchMethod(
          Invocation.method(#asBroadcastStream, [],
              {#onListen: onListen, #onCancel: onCancel}),
          returnValue: Stream<T>.empty()) as _i10.Stream<T>);
  @override
  _i10.StreamSubscription<T> listen(void Function(T)? onData,
          {Function? onError, void Function()? onDone, bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_8<T>())
          as _i10.StreamSubscription<T>);
  @override
  _i10.Stream<T> where(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: Stream<T>.empty()) as _i10.Stream<T>);
  @override
  _i10.Stream<S> map<S>(S Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#map, [convert]),
          returnValue: Stream<S>.empty()) as _i10.Stream<S>);
  @override
  _i10.Stream<E> asyncMap<E>(_i10.FutureOr<E> Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncMap, [convert]),
          returnValue: Stream<E>.empty()) as _i10.Stream<E>);
  @override
  _i10.Stream<E> asyncExpand<E>(_i10.Stream<E>? Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncExpand, [convert]),
          returnValue: Stream<E>.empty()) as _i10.Stream<E>);
  @override
  _i10.Stream<T> handleError(Function? onError,
          {bool Function(dynamic)? test}) =>
      (super.noSuchMethod(
          Invocation.method(#handleError, [onError], {#test: test}),
          returnValue: Stream<T>.empty()) as _i10.Stream<T>);
  @override
  _i10.Stream<S> expand<S>(Iterable<S> Function(T)? convert) =>
      (super.noSuchMethod(Invocation.method(#expand, [convert]),
          returnValue: Stream<S>.empty()) as _i10.Stream<S>);
  @override
  _i10.Future<dynamic> pipe(_i10.StreamConsumer<T>? streamConsumer) =>
      (super.noSuchMethod(Invocation.method(#pipe, [streamConsumer]),
          returnValue: Future<dynamic>.value()) as _i10.Future<dynamic>);
  @override
  _i10.Stream<S> transform<S>(
          _i10.StreamTransformer<T, S>? streamTransformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [streamTransformer]),
          returnValue: Stream<S>.empty()) as _i10.Stream<S>);
  @override
  _i10.Future<T> reduce(T Function(T, T)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
          returnValue: Future<T>.value(null)) as _i10.Future<T>);
  @override
  _i10.Future<S> fold<S>(S? initialValue, S Function(S, T)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: Future<S>.value(null)) as _i10.Future<S>);
  @override
  _i10.Future<String> join([String? separator = r'']) =>
      (super.noSuchMethod(Invocation.method(#join, [separator]),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  _i10.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(Invocation.method(#contains, [needle]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<dynamic> forEach(void Function(T)? action) =>
      (super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValue: Future<dynamic>.value()) as _i10.Future<dynamic>);
  @override
  _i10.Future<bool> every(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> any(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Stream<R> cast<R>() => (super.noSuchMethod(Invocation.method(#cast, []),
      returnValue: Stream<R>.empty()) as _i10.Stream<R>);
  @override
  _i10.Future<List<T>> toList() =>
      (super.noSuchMethod(Invocation.method(#toList, []),
          returnValue: Future<List<T>>.value(<T>[])) as _i10.Future<List<T>>);
  @override
  _i10.Future<Set<T>> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
          returnValue: Future<Set<T>>.value(<T>{})) as _i10.Future<Set<T>>);
  @override
  _i10.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#drain, [futureValue]),
          returnValue: Future<E>.value(null)) as _i10.Future<E>);
  @override
  _i10.Stream<T> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
          returnValue: Stream<T>.empty()) as _i10.Stream<T>);
  @override
  _i10.Stream<T> takeWhile(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: Stream<T>.empty()) as _i10.Stream<T>);
  @override
  _i10.Stream<T> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
          returnValue: Stream<T>.empty()) as _i10.Stream<T>);
  @override
  _i10.Stream<T> skipWhile(bool Function(T)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: Stream<T>.empty()) as _i10.Stream<T>);
  @override
  _i10.Stream<T> distinct([bool Function(T, T)? equals]) =>
      (super.noSuchMethod(Invocation.method(#distinct, [equals]),
          returnValue: Stream<T>.empty()) as _i10.Stream<T>);
  @override
  _i10.Future<T> firstWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#firstWhere, [test], {#orElse: orElse}),
          returnValue: Future<T>.value(null)) as _i10.Future<T>);
  @override
  _i10.Future<T> lastWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#lastWhere, [test], {#orElse: orElse}),
          returnValue: Future<T>.value(null)) as _i10.Future<T>);
  @override
  _i10.Future<T> singleWhere(bool Function(T)? test, {T Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#singleWhere, [test], {#orElse: orElse}),
          returnValue: Future<T>.value(null)) as _i10.Future<T>);
  @override
  _i10.Future<T> elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
          returnValue: Future<T>.value(null)) as _i10.Future<T>);
  @override
  _i10.Stream<T> timeout(Duration? timeLimit,
          {void Function(_i10.EventSink<T>)? onTimeout}) =>
      (super.noSuchMethod(
          Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
          returnValue: Stream<T>.empty()) as _i10.Stream<T>);
}
